# -*- coding: utf-8 -*-
"""DS_6:Data Preprocessing Pipeline

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YmR2W4RGzttpbNjpKf3z9SA1cbE_KKG2
"""

# Step 1: Import Required Libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline

# Step 2: Load the Dataset
# Replace 'your_dataset.csv' with your dataset path
data = pd.DataFrame({
    "Age": [25, np.nan, 28, 22, np.nan],
    "Salary": [50000, 60000, np.nan, 58000, 52000],
    "City": ["New York", "Paris", "New York", np.nan, "Paris"],
    "Purchased": ["Yes", "No", "No", "Yes", "Yes"]
})
print("Initial Data:\n", data)

# Step 3: Define Feature Columns
numerical_features = ["Age", "Salary"]
categorical_features = ["City"]

# Step 4: Handle Missing Values
numerical_transformer = SimpleImputer(strategy='mean')  # Fill numerical NaNs with the mean
categorical_transformer = Pipeline(steps=[
    ('imputer', SimpleImputer(strategy='most_frequent')),  # Fill categorical NaNs with the mode
    ('encoder', OneHotEncoder(handle_unknown='ignore'))   # Encode categorical variables
])

# Step 5: Combine Preprocessors in a ColumnTransformer
preprocessor = ColumnTransformer(
    transformers=[
        ('num', numerical_transformer, numerical_features),
        ('cat', categorical_transformer, categorical_features)
    ])

# Step 6: Feature Scaling and Model Pipeline
pipeline = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('scaler', StandardScaler())
])

# Step 7: Separate Features and Target Variable
X = data.drop("Purchased", axis=1)
y = data["Purchased"]

# Step 8: Split the Dataset into Training and Testing Sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
print("\nTraining Features:\n", X_train)
print("\nTesting Features:\n", X_test)

# Step 9: Apply the Pipeline to the Training Data
X_train_transformed = pipeline.fit_transform(X_train)
X_test_transformed = pipeline.transform(X_test)

# Step 10: Display Transformed Data
print("\nTransformed Training Features:\n", X_train_transformed)
print("\nTransformed Testing Features:\n", X_test_transformed)